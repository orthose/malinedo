# Generated by Django 5.1.2 on 2025-09-25 17:02

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GlobalSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(max_length=255, unique=True, verbose_name="Clé"),
                ),
                ("value", models.TextField(verbose_name="Valeur")),
                (
                    "value_type",
                    models.CharField(
                        choices=[
                            ("str", "String"),
                            ("int", "Integer"),
                            ("bool", "Boolean"),
                            ("float", "Float"),
                        ],
                        default="str",
                        max_length=10,
                        verbose_name="Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "paramètre global",
                "verbose_name_plural": "paramètres globaux",
            },
        ),
        migrations.CreateModel(
            name="SessionGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "max_registrations_per_week",
                    models.PositiveSmallIntegerField(
                        verbose_name="Limite d'inscriptions hebdomadaires par nageur"
                    ),
                ),
                (
                    "group",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="auth.group",
                        verbose_name="Groupe",
                    ),
                ),
            ],
            options={
                "verbose_name": "groupe de nage",
                "verbose_name_plural": "groupes de nage",
            },
        ),
        migrations.CreateModel(
            name="WeeklySession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "weekday",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Lundi"),
                            (2, "Mardi"),
                            (3, "Mercredi"),
                            (4, "Jeudi"),
                            (5, "Vendredi"),
                            (6, "Samedi"),
                            (7, "Dimanche"),
                        ],
                        verbose_name="Jour",
                    ),
                ),
                ("start_hour", models.TimeField(verbose_name="Heure début")),
                ("stop_hour", models.TimeField(verbose_name="Heure fin")),
                ("capacity", models.PositiveSmallIntegerField(verbose_name="Capacité")),
                (
                    "is_cancelled",
                    models.BooleanField(default=False, verbose_name="Est annulée ?"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        to="booking.sessiongroup", verbose_name="Groupes"
                    ),
                ),
            ],
            options={
                "verbose_name": "session hebdomadaire",
                "verbose_name_plural": "sessions hebdomadaires",
            },
        ),
        migrations.CreateModel(
            name="SessionRegistration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_regular", models.BooleanField(verbose_name="Est régulière ?")),
                (
                    "is_cancelled",
                    models.BooleanField(default=False, verbose_name="Est annulée ?"),
                ),
                (
                    "swimmer_is_coach",
                    models.BooleanField(default=False, verbose_name="Est entraîneur ?"),
                ),
                (
                    "swimmer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Nageur",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.weeklysession",
                        verbose_name="Session",
                    ),
                ),
            ],
            options={
                "verbose_name": "inscription session",
                "verbose_name_plural": "inscriptions sessions",
            },
        ),
        migrations.CreateModel(
            name="WeeklySessionHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "weekday",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Lundi"),
                            (2, "Mardi"),
                            (3, "Mercredi"),
                            (4, "Jeudi"),
                            (5, "Vendredi"),
                            (6, "Samedi"),
                            (7, "Dimanche"),
                        ],
                        verbose_name="Jour",
                    ),
                ),
                ("start_hour", models.TimeField(verbose_name="Heure début")),
                ("stop_hour", models.TimeField(verbose_name="Heure fin")),
                ("capacity", models.PositiveSmallIntegerField(verbose_name="Capacité")),
                (
                    "is_cancelled",
                    models.BooleanField(default=False, verbose_name="Est annulée ?"),
                ),
                ("year", models.IntegerField(verbose_name="année")),
                (
                    "week",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(53),
                        ],
                        verbose_name="semaine",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        to="booking.sessiongroup", verbose_name="Groupes"
                    ),
                ),
            ],
            options={
                "verbose_name": "historique session hebdomadaire",
                "verbose_name_plural": "historique sessions hebdomadaires",
            },
        ),
        migrations.CreateModel(
            name="SessionRegistrationHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_regular", models.BooleanField(verbose_name="Est régulière ?")),
                (
                    "is_cancelled",
                    models.BooleanField(default=False, verbose_name="Est annulée ?"),
                ),
                (
                    "swimmer_is_coach",
                    models.BooleanField(default=False, verbose_name="Est entraîneur ?"),
                ),
                (
                    "swimmer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Nageur",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.weeklysessionhistory",
                    ),
                ),
            ],
            options={
                "verbose_name": "historique inscription session",
                "verbose_name_plural": "historique inscriptions sessions",
                "permissions": [],
            },
        ),
        migrations.AddConstraint(
            model_name="weeklysession",
            constraint=models.CheckConstraint(
                condition=models.Q(("start_hour__lt", models.F("stop_hour"))),
                name="check_weekly_session_start_hour_before_stop_hour",
            ),
        ),
        migrations.AddConstraint(
            model_name="sessionregistration",
            constraint=models.UniqueConstraint(
                models.F("swimmer"),
                models.F("session"),
                name="unique_swimmer_for_one_session",
            ),
        ),
        migrations.AddConstraint(
            model_name="weeklysessionhistory",
            constraint=models.CheckConstraint(
                condition=models.Q(("start_hour__lt", models.F("stop_hour"))),
                name="check_weekly_session_history_start_hour_before_stop_hour",
            ),
        ),
        migrations.AddConstraint(
            model_name="sessionregistrationhistory",
            constraint=models.UniqueConstraint(
                models.F("swimmer"),
                models.F("session"),
                name="unique_swimmer_for_one_session_history",
            ),
        ),
    ]
